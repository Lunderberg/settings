#!/usr/bin/env python3

import argparse
import contextlib
import itertools
import os
import re
import sys

from typing import Optional

import psutil


def find_proc(
    pid: Optional[int], name: Optional[str], cmd_regex: Optional[str]
) -> Optional[psutil.Process]:
    if pid is None:
        proc_iter = psutil.process_iter()
    else:
        proc_iter = [psutil.Process(pid)]

    def _is_match(proc: psutil.Process) -> bool:
        filters = [
            lambda: proc.pid != os.getpid(),
            lambda: (
                name is None
                or proc.name() == name
                or re.match(f"^{name}$", proc.name())
            ),
            lambda: cmd_regex is None or re.search(cmd_regex, " ".join(proc.cmdline())),
        ]
        return all(filter() for filter in filters)

    matches = [proc for proc in proc_iter if _is_match(proc)]

    if matches:
        return min(matches, key=lambda proc: proc.create_time())
    else:
        return None


def main(args):
    kwargs = dict(
        pid=args.pid,
        cmd_regex=args.cmd,
        include_children=args.include_children,
    )

    show_total()
    print()

    if args.name:
        for name in args.name:
            show_proc(name=name, **kwargs)
    else:
        show_proc(name=None, **kwargs)


def show_total():
    mem_usage_bytes = 0
    have_sufficient_permissions = True
    for proc in psutil.process_iter():
        try:
            mem_info = proc.memory_full_info()
        except psutil.AccessDenied:
            have_sufficient_permissions = False
            continue

        mem_usage_bytes += mem_info.rss

    symbol = "==" if have_sufficient_permissions else ">="
    mem_usage_gigabytes = mem_usage_bytes / (1024**3)
    print(
        f"Total memory usage {symbol} {mem_usage_bytes} bytes ({mem_usage_gigabytes:.2f} GB)"
    )


def show_proc(
    pid: Optional[int],
    name: Optional[str],
    cmd_regex: Optional[str],
    include_children: bool,
):
    print_name = f"{name}: " if name else ""

    proc = find_proc(pid=pid, name=name, cmd_regex=cmd_regex)
    if proc is None:
        print(f"{print_name}Not running")
        return

    mem_usage_bytes = 0
    have_sufficient_permissions = True

    proc_iter = [proc]
    if include_children:
        proc_iter = itertools.chain(proc_iter, proc.children(recursive=True))

    for proc in proc_iter:
        try:
            mem_info = proc.memory_full_info()
        except psutil.AccessDenied:
            have_sufficient_permissions = False
            continue

        # mem_usage_bytes += mem_info.pss
        mem_usage_bytes += mem_info.rss

    symbol = "==" if have_sufficient_permissions else ">="
    mem_usage_gigabytes = mem_usage_bytes / (1024**3)

    print(
        f"{print_name}Memory usage {symbol} {mem_usage_bytes} bytes ({mem_usage_gigabytes:.2f} GB)"
    )


@contextlib.contextmanager
def debug_on_except():
    try:
        yield
    finally:
        if isinstance(sys.exc_info()[1], Exception):
            import traceback

            try:
                import ipdb as pdb
            except ImportError:
                import pdb

            traceback.print_exc()
            pdb.post_mortem()


def arg_main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-p",
        "--pid",
        type=int,
        default=None,
        help="The PID of the program to inspect",
    )
    parser.add_argument(
        "-c",
        "--cmd",
        type=str,
        default=None,
        help="A regex matching the PID of the program to inspect",
    )
    parser.add_argument(
        "-n",
        "--name",
        type=str,
        action="append",
        help="The name of the program to inspect",
    )
    parser.add_argument(
        "--skip-children",
        action="store_false",
        dest="include_children",
        default=True,
        help="Only include the process itself, without including child processes",
    )
    parser.add_argument(
        "--pdb",
        action="store_true",
        help="Start a pdb post mortem on uncaught exception",
    )

    args = parser.parse_args()

    with contextlib.ExitStack() as stack:
        if args.pdb:
            stack.enter_context(debug_on_except())

        main(args)


if __name__ == "__main__":
    arg_main()
