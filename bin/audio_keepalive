#!/usr/bin/env python3

import argparse
import contextlib
import datetime
import itertools
import subprocess
import sys
import time


def main(args):
    duration = str(args.sound_duration)

    effect_synth = [
        # Mono-channel
        "-c1",
        # Synth output
        "synth",
        "sin",
        "%-12",
        "sin",
        "%-9",
        "sin",
        "%-5",
        "sin",
        "%-2",
        # Fade in/out
        "fade",
        "h",
        "0.1",
        duration,
        "0.1",
        # Make it quiet
        "vol",
        str(args.volume),
    ]
    if not args.debug_synth:
        effect_synth.clear()

    effect_trim = [
        "trim",
        "0.0",
        duration,
    ]

    cmd = [
        "play",
        # Do not read any input file
        "--null",
        # Specify the output as the ALSA audio driver.
        "--type",
        "alsa",
        # Do not show a progress bar
        "--no-show-progress",
        # The sound itself
        *effect_synth,
        *effect_trim,
    ]

    iterable = itertools.count() if args.num_output is None else range(args.num_output)

    for i in iterable:
        if args.verbose:
            print(f"{datetime.datetime.now()}: Playing sound {i}")
        subprocess.check_call(cmd)
        time.sleep(args.sleep_seconds)


@contextlib.contextmanager
def debug_on_except():
    try:
        yield
    finally:
        if isinstance(sys.exc_info()[1], Exception):
            import traceback

            try:
                import ipdb as pdb
            except ImportError:
                import pdb

            traceback.print_exc()
            pdb.post_mortem()


def arg_main():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--num-output",
        type=int,
        default=None,
        help="The number of times to play the output sound (default=infinite)",
    )
    parser.add_argument(
        "--sleep-seconds",
        type=float,
        default=300.0,
        help="Time to sleep between each audio output",
    )
    parser.add_argument(
        "--debug-synth",
        action="store_true",
        help="Play a synth sound instead of silence, for debugging.",
    )
    parser.add_argument(
        "--volume",
        type=float,
        default=0.1,
        help="The volume of the debug synth sound (0.0 to 1.0)",
    )
    parser.add_argument(
        "--sound-duration",
        type=float,
        default=1.0,
        help="The duration of the audio output",
    )
    parser.add_argument(
        "-v",
        "--verbose",
        action="store_true",
        help="Show verbose output",
    )
    parser.add_argument(
        "--pdb",
        action="store_true",
        help="Start a pdb post mortem on uncaught exception",
    )

    args = parser.parse_args()

    with contextlib.ExitStack() as stack:
        if args.pdb:
            stack.enter_context(debug_on_except())

        main(args)


if __name__ == "__main__":
    arg_main()
