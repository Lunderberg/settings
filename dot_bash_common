# -*-Sh-*-

# PATH updates
SCRIPT_DIR=$(dirname $(readlink -e ${BASH_SOURCE[0]}))
export PATH=$SCRIPT_DIR/bin:$PATH
export PATH=.:~/.local/bin:~/bin:$PATH

# Local installation of emacs, if one exists.
if ls /opt/*emacs*  > /dev/null 2> /dev/null; then
    EMACS_BIN=$(find -L /opt/*emacs* -name emacs -type f | sort | tail -n1)
    export PATH="$(dirname "${EMACS_BIN}")":$PATH
fi
if [[ -d /opt/bin ]]; then
    export PATH=$PATH:/opt/bin
fi

# Add any ruby bin directories (e.g. for jekyll)
for ruby_dir in ~/.gem/ruby/*; do
    [[ -e "${ruby_dir}" ]] || continue
    export PATH=$PATH:"${ruby_dir}/bin"
done

# Add rust compiler to PATH
if [[ -e ~/.cargo/env ]]; then
    source ~/.cargo/env
fi

export PYTHONPATH=$PYTHONPATH:$SCRIPT_DIR/pylib
export XENVIRONMENT=~/.Xresources

if python3 -c "import ipdb" 2> /dev/null; then
    export PYTEST_ADDOPTS='--pdbcls=IPython.terminal.debugger:TerminalPdb'
fi

# Produce poetry environments in each project.  Because, you know,
# they're specific to a project.
export POETRY_VIRTUALENVS_IN_PROJECT=1

# Use whichever `python3` is currently in use, not whichever one was
# used to install `poetry` however long ago it was.
export POETRY_VIRTUALENVS_PREFER_ACTIVE_PYTHON=1

# TODO: Find a way to add local dev tools to every poetry environment.
# I shouldn't need to update a repo's `pyproject.toml` in order to
# install my own preferred debugging tools (e.g. `ipython` and
# `ipdb`).  I can either use `export
# POETRY_VIRTUALENVS_OPTIONS_SYSTEM_SITE_PACKAGES=1` to expose
# *everything* in my local environment, or can use `poetry run python3
# -mpip install` after making the virtual environment.  However, both
# of those would be way too coarse of a tool.


# Prevent pip popup unnecessarily asking to unlock the "kdewallet"
# keyring.
#
# https://github.com/pypa/pip/issues/8090#issuecomment-803363268
export PYTHON_KEYRING_BACKEND=keyring.backends.null.Keyring

# Ignore the `EXTERNALLY-MANAGED` file.  When present, this file
# prevents using pip to install packages, as they are already managed
# by the distro.  I like this functionality, except that it also
# prevents installing packages to the ~/.local/lib directory with
# `python3 -mpip install --user`.
#
# The rationale is that a system utility may be run as a user, and may
# rely on `import foo` importing a specific distro-provided version of
# `foo`.  By allowing installs to ~/.local/lib, a user running the
# utility that relies on the distro's `python3` may accidentally
# override the `import foo`.  But such a utility should be running
# with the `-I` flag for an isolated environment anyways, since a
# local `foo.py` file would cause the exact same issue.
#
# I wish there were a way to block accidental installation to
# /usr/lib/python3* while still allowing use of user-specific package
# installs, but it doesn't seem like there is.
#
# See https://discuss.python.org/t/pep-668-marking-python-base-environments-as-externally-managed/10302/103
# for more details.
export PIP_BREAK_SYSTEM_PACKAGES=1

# By default, Triton dumps everything into the `$HOME/.triton` folder,
# which is pretty bad behavior given how large this folder can become.
# During installation, it uses `$TRITON_HOME/.triton` as a download
# location for temporary files, which are never cleaned up.  During
# runtime, it uses either `$TRITON_CACHE_DIR` or
# `$TRITON_HOME/.triton/cache` to store compiled kernels for re-use on
# a later usage.  Thi
export TRITON_HOME=$HOME/.cache/triton
export TRITON_OVERRIDE_DIR=$HOME/.config/triton/overrides
export TRITON_CACHE_DIR=$HOME/.cache/triton/kernels
export TRITON_DUMP_DIR=$HOME/.cache/triton/dumps
# export TRITON_ALWAYS_COMPILE=1

# Select a color for the user and server, random based on hostname.
if which pseudorandom_console_color.py > /dev/null; then
    export USER_COLOR=`pseudorandom_console_color.py $USER`
    export SERVER_COLOR=`pseudorandom_console_color.py $HOSTNAME`
else
    export USER_COLOR="1;32"
    export SERVER_COLOR="1;32"
fi
export PS1="\[\e[${USER_COLOR}m\]\u\[\e[1;32m\]@\[\e[${SERVER_COLOR}m\]\h\[\e[1;34m\] \w \$\[\e[m\] "

export HISTFILESIZE=10000

# TVM-specific settings
export TVM_PYGMENTIZE_STYLE=dracula
export TVM_BLACK_FORMAT=1

#Make handling the DISPLAY variable a bit easier with tmux.  This will
#update the current shell to have the same DISPLAY variable as the
#most recent attachment to tmux.
alias dis='export $(tmux showenv | grep DISPLAY)'

alias tm='tmux new-session -A -s0'

eval $(dircolors ~/.dir_colors)

alias ec="emacsclient -a '' -c"
alias en="emacsclient -a '' -n"
export EDITOR="emacsclient -a '' -c -nw"

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias ls='ls --color=auto'
alias ll='ls -lh'
alias duh='du -d 1 -h --exclude "./.snapshot"'

alias grab_sconstruct='wget --no-cache https://raw.githubusercontent.com/Lunderberg/magic_cpp_makefile/master/SConstruct'
alias grab_makefile='wget --no-cache https://raw.githubusercontent.com/Lunderberg/magic_cpp_makefile/master/Makefile'
alias grab_ensure_venv='wget --no-cache https://raw.githubusercontent.com/Lunderberg/ensure_venv/master/ensure_venv.py'

export LESS="--no-init --quit-if-one-screen --raw-control-chars"
alias more="less"

alias grep='grep --color=auto'
alias py='python3 -mIPython'
alias ssh='ssh -Y'

alias cd..="cd .."

# Build-system configurations
export NUM_BUILD_JOBS=$(( $(nproc) * 3 / 4 ))
export MAKEFLAGS="--no-print-directory -j${NUM_BUILD_JOBS}"
if which ccache > /dev/null; then
    export CMAKE_C_COMPILER_LAUNCHER=ccache
    export CMAKE_CXX_COMPILER_LAUNCHER=ccache
    export CMAKE_CUDA_COMPILER_LAUNCHER=ccache
fi
export CMAKE_EXPORT_COMPILE_COMMANDS=1

# `git lfs` cannot run at all if it isn't enabled by default with
# `git lfs install`.  I want to selectively download large files,
# without having them automatically downloaded on `git clone`.
# Therefore, I need to disable `git lfs` through an environment
# variable, since its configuration cannot be removed without
# disabling it entirely.
export GIT_LFS_SKIP_SMUDGE=1

# Extract symbols from .so file
alias symbols="nm --demangle --extern-only --dynamic"
alias undefined_symbols="ldd --function-relocs"

function addpath() {
    if [ $# -ge 1 ]; then
        export PATH=$1:$PATH
    else
        export PATH=`pwd`:$PATH
    fi
}

#Stop ^S from freezing the screen until ^Q is given.
stty -ixon 2> /dev/null

function show(){
    string=$(eval echo \$$1)
    old=$IFS
    IFS=:
    printf "%s\n" $string
    IFS=$old
}

# Adapted from https://stackoverflow.com/a/19067658
function sleep_until() { # args [-q] <HH[:MM[:SS]]> [more days]
    local slp tzoff now quiet=false

    if [[ "$1" = "-q" ]]; then
        shift
        quiet=true
    fi

    if [[ $# = 0 ]]; then
        echo "Missing argument when to wake" >&2
        return 1
    fi

    local -a hms=(${1//:/ })
    printf -v now '%(%s)T' -1
    printf -v tzoff '%(%z)T\n' $now
    tzoff=$((0${tzoff:0:1}(3600*${tzoff:1:2}+60*${tzoff:3:2})))
    slp=$((
       ( 86400+(now-now%86400) + 10#$hms*3600 + 10#${hms[1]}*60 +
         ${hms[2]}-tzoff-now ) %86400 + ${2:-0}*86400
    ))
    $quiet || printf 'sleep %ss, -> %(%c)T\n' $slp $((now+slp))
    sleep $slp
}

command_not_found_handle() {
    if [ -x /usr/lib/command-not-found ]; then
        /usr/lib/command-not-found -- "$1"
        return $?
    else
        echo "Unknown command: $1"
        return 127
    fi
}

if which loginctl > /dev/null && loginctl >& /dev/null; then
    if loginctl show-user | grep KillUserProcesses | grep -q yes; then
        echo "systemd is set to kill user processes on logoff"
        echo "This will break screen, tmux, emacs --daemon, nohup, etc"
        echo "Tell the sysadmin to set KillUserProcesses=no in /etc/systemd/login.conf"
    fi
fi

# Private environment variables stored in the settings-private.
if [ -f ~/.bash_private ]; then
    source ~/.bash_private
fi

# Host-specific setup
if [ -f ~/.bash_local ]; then
    source ~/.bash_local
fi
