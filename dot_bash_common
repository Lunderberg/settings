# -*-Sh-*-

# PATH updates
SCRIPT_DIR=$(dirname $(readlink -e ${BASH_SOURCE[0]}))
export PATH=$SCRIPT_DIR/bin:$PATH
export PATH=.:~/.local/bin:~/bin:$PATH

# Local installation of emacs, if one exists.
if ls /opt | grep -q emacs; then
   export PATH=$PATH:$(ls -d /opt/emacs-*/bin)
fi

# Add any ruby bin directories (e.g. for jekyll)
for ruby_dir in ~/.gem/ruby/*; do
    [[ -e "${ruby_dir}" ]] || continue
    export PATH=$PATH:"${ruby_dir}/bin"
done

# Add rust compiler to PATH
if [[ -e ~/.cargo/env ]]; then
    source ~/.cargo/env
fi

export PYTHONPATH=$PYTHONPATH:$SCRIPT_DIR/pylib
export XENVIRONMENT=~/.Xresources


# Prevent pip popup unnecessarily asking to unlock the "kdewallet"
# keyring.
#
# https://github.com/pypa/pip/issues/8090#issuecomment-803363268
export PYTHON_KEYRING_BACKEND=keyring.backends.null.Keyring

if [ "$TERM" != "dumb" ]; then
    if [ -n "$TMUX" ]; then
        export TERM=screen-256color
    else
        export TERM=xterm-256color
    fi
fi

# Select a color for the user and server, random based on hostname.
if which pseudorandom_console_color.py > /dev/null; then
    export USER_COLOR=`pseudorandom_console_color.py $USER`
    export SERVER_COLOR=`pseudorandom_console_color.py $HOSTNAME`
else
    export USER_COLOR="1;32"
    export SERVER_COLOR="1;32"
fi
export PS1="\[\e[${USER_COLOR}m\]\u\[\e[1;32m\]@\[\e[${SERVER_COLOR}m\]\h\[\e[1;34m\] \w \$\[\e[m\] "

export HISTFILESIZE=10000

# TVM-specific settings
export TVM_PYGMENTIZE_STYLE=dracula

#Make handling the DISPLAY variable a bit easier with tmux.  This will
#update the current shell to have the same DISPLAY variable as the
#most recent attachment to tmux.
alias dis='export $(tmux showenv | grep DISPLAY)'

alias tm='tmux new-session -A -s0'

eval $(dircolors ~/.dir_colors)

alias ec="emacsclient -a '' -c"
alias en="emacsclient -a '' -n"
export EDITOR="emacsclient -a '' -c -nw"

alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias ls='ls --color=auto'
alias ll='ls -lh'
alias duh='du -d 1 -h --exclude "./.snapshot"'

alias grab_sconstruct='wget --no-cache https://raw.githubusercontent.com/Lunderberg/magic_cpp_makefile/master/SConstruct'
alias grab_makefile='wget --no-cache https://raw.githubusercontent.com/Lunderberg/magic_cpp_makefile/master/Makefile'
alias grab_ensure_venv='wget --no-cache https://raw.githubusercontent.com/Lunderberg/ensure_venv/master/ensure_venv.py'

export LESS="--no-init --quit-if-one-screen --raw-control-chars"
alias more="less"

alias grep='grep --color=auto'
alias py='python3 -mIPython'
alias ssh='ssh -Y'

alias cd..="cd .."

# Extract symbols from .so file
alias symbols="nm --demangle --extern-only --dynamic"
alias undefined_symbols="ldd --function-relocs"

function addpath() {
    if [ $# -ge 1 ]; then
        export PATH=$1:$PATH
    else
        export PATH=`pwd`:$PATH
    fi
}

#Stop ^S from freezing the screen until ^Q is given.
stty -ixon 2> /dev/null

function show(){
    string=$(eval echo \$$1)
    old=$IFS
    IFS=:
    printf "%s\n" $string
    IFS=$old
}

# Adapted from https://stackoverflow.com/a/19067658
function sleep_until() { # args [-q] <HH[:MM[:SS]]> [more days]
    local slp tzoff now quiet=false

    if [[ "$1" = "-q" ]]; then
        shift
        quiet=true
    fi

    if [[ $# = 0 ]]; then
        echo "Missing argument when to wake" >&2
        return 1
    fi

    local -a hms=(${1//:/ })
    printf -v now '%(%s)T' -1
    printf -v tzoff '%(%z)T\n' $now
    tzoff=$((0${tzoff:0:1}(3600*${tzoff:1:2}+60*${tzoff:3:2})))
    slp=$((
       ( 86400+(now-now%86400) + 10#$hms*3600 + 10#${hms[1]}*60 +
         ${hms[2]}-tzoff-now ) %86400 + ${2:-0}*86400
    ))
    $quiet || printf 'sleep %ss, -> %(%c)T\n' $slp $((now+slp))
    sleep $slp
}

command_not_found_handle() {
    if [ -x /usr/lib/command-not-found ]; then
        /usr/lib/command-not-found -- "$1"
        return $?
    else
        echo "Unknown command: $1"
        return 127
    fi
}

if which loginctl > /dev/null && loginctl >& /dev/null; then
    if loginctl show-user | grep KillUserProcesses | grep -q yes; then
        echo "systemd is set to kill user processes on logoff"
        echo "This will break screen, tmux, emacs --daemon, nohup, etc"
        echo "Tell the sysadmin to set KillUserProcesses=no in /etc/systemd/login.conf"
    fi
fi

# Private environment variables stored in the settings-private.
if [ -f ~/.bash_private ]; then
    source ~/.bash_private
fi

# Host-specific setup
if [ -f ~/.bash_local ]; then
    source ~/.bash_local
fi
