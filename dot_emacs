;; -*-Lisp-*-

;; (require 'warnings)

;; (add-to-list 'load-path "~/.emacs.d/misc")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;    Package Management         ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Keep custom-set-variables from being added to the bottom of my
;; .emacs file.  Needs to be on top, because package-install is the
;; most common cause.
(setq custom-file (concat user-emacs-directory "custom.el"))
(load custom-file 'noerror)

(require 'package)
(add-to-list
 'package-archives
 '("melpa" . "http://melpa.org/packages/")
 t)

(package-initialize)

;; Workaround for emacs<26.3
;; https://emacs.stackexchange.com/a/58434/14780
(when (or (< emacs-major-version 26)
	  (and (= emacs-major-version 26) (< emacs-minor-version 3)))
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3"))

;; Init the list of package.  Only needs to be done once per
;; installation, but otherwise package-install will complain.
(unless package-archive-contents
  (message "Pulling package list from GNU ELPA/MELPA")
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
  (message "Installing use-package")
  (package-install 'use-package))

(setq use-package-always-ensure t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;         Utility functions          ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; From https://stackoverflow.com/a/24357106/2689797
(defun append-to-list (list-var elements)
  "Append ELEMENTS to the end of LIST-VAR"
  (declare (indent 1))
  (unless (consp elements)
    (error "ELEMENTS must be a list"))
  (let ((list (symbol-value list-var)))
    (if list
        (setcdr (last list) elements)
      (set list-var elements)))
  (symbol-value list-var))

;; From https://stackoverflow.com/a/17325791/2689797, can be removed
;; in emacs 28.1 or higher.
(defun string-replace (fromstring tostring instring)
  (replace-regexp-in-string (regexp-quote fromstring)
                            tostring instring nil 'literal))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Display, coloring, fontsize   ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package rainbow-mode
  :hook (html-mode css-mode web-mode))

(defun update-font-size (&optional frame)
  "Set the font size to something reasonable, given the monitor's dpi"
  (let* ((frame (or frame (selected-frame)))
         (display (frame-terminal frame)))
    (when (display-graphic-p display)
      (let* ((pixel-height (display-pixel-height display))
             (pixel-width (display-pixel-width display))
             (mm-height (float (x-display-mm-height display)))
             (mm-width (float (x-display-mm-width display)))
             (dpi (* 25.4 0.5 (+ (/ pixel-height mm-height)
                                 (/ pixel-width mm-width))))
             (font-size (cond ((< dpi 80) 100)
                              ('t 120)))
             )

        (message "Selecting font size %d for monitor dpi %f" font-size dpi)
        (set-face-attribute 'default frame :height font-size)))))

;; Call once for the initial frame, and once for every new frame
(add-to-list 'after-make-frame-functions 'update-font-size)
(update-font-size)


(use-package color-theme-modern
  :config
  (load-theme 'euphoria t t)
  (enable-theme 'euphoria)
  (set-face-foreground 'font-lock-preprocessor-face "light sea green")
  (set-face-foreground 'font-lock-constant-face "light sea green")
  )

(use-package hl-line
  :config
  (global-hl-line-mode t)
  (set-face-background hl-line-face "gray10")
  )


(add-hook 'ediff-load-hook
          (function (lambda ()
                      ;; Because side-by-side diffs are easier to read
                      ;; than top/bottom diffs.
                      (setq ediff-split-window-function #'split-window-horizontally)
                      ;; Because the default background color is awful
                      ;; with my preferred color scheme.
                      (dolist (face (list ediff-odd-diff-face-A ediff-odd-diff-face-B
                                                            ediff-even-diff-face-A ediff-even-diff-face-B))

                        (set-face-background face "gray10"))
                      )))






;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; General keyboard shortcuts    ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Startup behavior
(setq inhibit-startup-message t)
(setq initial-major-mode 'lisp-mode)

;; Hide the menu, tool, and scroll bar.
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; Don't highlight everything when leaving a mark
(setq transient-mark-mode nil)

;; Ignore <Scroll_Lock> sent when alt-tabbing into PuTTY, which dings.
(global-set-key (kbd "<Scroll_Lock>") 'ignore)

;; Show the column number alongside the line number
(setq column-number-mode t)

;; Respond to mouse clicks in terminal.
(xterm-mouse-mode t)

;; Don't kill newline unless line is empty.
(setq kill-whole-line nil)

;; Tab behavior, use 8 spaces.
(setq-default tab-width 8)
(setq-default indent-tabs-mode nil)

;; Enable the C-n-n shortcut
(put 'narrow-to-region 'disabled nil)

;; Don't open a new window for gpg password
(setq epg-pinentry-mode 'loopback)

;;Automatically make script files be executable
(add-hook 'after-save-hook
          'executable-make-buffer-file-executable-if-script-p)

;; Enable electric-indent-mode, but keep C-j as newline-and-indent.
(setq electric-indent-mode t)
(global-set-key [remap electric-newline-and-maybe-indent]
                'newline-and-indent)

;; The default comment-dwim assumes transient-mark-mode is on.  The
;; simpler behavior is closer to what I want.
(global-set-key (kbd "M-;") 'comment-or-uncomment-region)

;;M-<up> and M-<down> to scroll up/down by one line.
(global-set-key (kbd "<M-up>") (lambda () (interactive) (scroll-down 1)))
(global-set-key (kbd "<M-down>") (lambda () (interactive) (scroll-up 1)))

;; Before saving, remove trailing whitespace from any modified lines.
;; Could use delete-trailing-whitespace as a before-save-hook, but
;; that can lead to huge diffs.
(use-package ws-butler
  :config
  (ws-butler-global-mode))


;; Kill/yank go to the system's clipboard.  Requires xclip to be
;; installed.
(use-package xclip
  :ensure t
  :config
  (xclip-mode))

;; Update the DISPLAY variable based on the most recent connection to
;; tmux.  Typically only needed if terminal emacs needs to launch a
;; GUI, because GUI emacsclient updates the DISPLAY on its own.
(defun update-display-variable ()
  (interactive)
  (let* ((command "tmux showenv | grep DISPLAY | cut -d = -f 2 | tr -d '\\n'")
         (display (shell-command-to-string command)))
    (setenv "DISPLAY" display)))

;; Keep all backup files, auto-save files and lock-files inside the
;; ~/.emacs.d directory.  I tried having these be hidden files within
;; the current directory, but it can cause issues with backup files
;; being accidentally committed, or lock-files being caught in *.cc
;; globs in cmake.  Better to just have them all in a separate
;; location.
(setq backup-directory-alist `(("." . ,(concat user-emacs-directory "backup-files"))))
(let ((my-auto-save-dir (locate-user-emacs-file "auto-save-files/")))
  (setq auto-save-file-name-transforms `((".*" ,my-auto-save-dir t)))
  (unless (file-exists-p my-auto-save-dir)
    (make-directory my-auto-save-dir)))
(let ((my-lock-dir (locate-user-emacs-file "lock-files/")))
  (setq lock-file-name-transforms `((".*" ,my-lock-dir t)))
  (unless (file-exists-p my-lock-dir)
    (make-directory my-lock-dir)))

;; Before saving, make the directory if it doesn't exist.
(defun make-current-directory ()
  (when (not (file-exists-p default-directory))
    (make-directory default-directory t)))
(add-hook 'before-save-hook 'make-current-directory)

;; C-a goes to start of text, then to start of line
(defun smarter-move-beginning-of-line ()
  (interactive)
  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line nil))))
(global-set-key (kbd "C-a") 'smarter-move-beginning-of-line)

;; Use emacs as a calculator.  Evaluate and replace the preceding
;; sexp.
(defun replace-last-sexp ()
  (interactive)
  (let ((value (eval (preceding-sexp))))
    (kill-sexp -1)
    (insert (format "%s" value))))
(global-set-key "\M-E" 'replace-last-sexp)

;;Insert and go to a line before the current line.
(defun line-before ()
  (interactive)
  (previous-line)
  (move-end-of-line 1)
  (newline-and-indent))
(global-set-key (kbd "<M-RET>") 'line-before)

;;Delete both the current buffer, and the file it visits.
(defun kill-buffer-and-file ()
  (interactive)
  (let ((filename (buffer-file-name))
	(buffer (current-buffer))
	(name (buffer-name)))
    (if (not (and filename (file-exists-p filename)))
	(error "Buffer '%s' is not visiting a file." name)
      (when (yes-or-no-p "Are you sure you want to delete this file? ")
	(delete-file filename)
	(kill-buffer buffer)
	(message "File '%s' deleted." filename)))))
(global-set-key (kbd "C-x n k") 'kill-buffer-and-file)

;; Ignore C-z in X11 frames.
(defun suspend-frame-if-tty ()
  (interactive)
  (if (not (display-graphic-p))
      (suspend-frame)))
(global-set-key [remap suspend-frame] 'suspend-frame-if-tty)

;; Ask before exiting a long-lived session
(defun live-time ()
  (let* ((time (assoc 'etime (process-attributes (emacs-pid))))
	 (high (cadr time))
	 (low  (caddr time))
	 (usec (cadddr time)))
    (+ (* high 65536) low (/ usec 1e6))))
(defun old-emacs-query-exit ()
  (interactive)
  (when (or (frame-parameter nil 'client)
            (< (live-time) 86400)
            (yes-or-no-p (format "Exit this %d-day-old emacs session? "
                                 (/ (live-time) 86400))))
    (save-buffers-kill-terminal)))
(global-set-key [remap save-buffers-kill-terminal]
		'old-emacs-query-exit)

(defun just-one-space-with-newline ()
  (interactive)
  (just-one-space -1))
(global-set-key [remap just-one-space]
                'just-one-space-with-newline)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;      hexl customizations           ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Customizations for viewing binary files.  Not having used these
;; since 2017, they're commented out for now.

;; http://emacs.stackexchange.com/a/10297/118

;; (defun buffer-binary-p (&optional buffer)
;;   "Return whether BUFFER or the current buffer is binary.
;; A binary buffer is defined as containing at least on null byte.
;; Returns either nil, or the position of the first null byte."
;;   (with-current-buffer (or buffer (current-buffer))
;;     (save-excursion
;;       (goto-char (point-min))
;;       (search-forward (string ?\x00) nil t 1))))

;; (defun hexl-if-binary ()
;;   "If `hexl-mode' is not already active, and the current buffer
;; is binary, activate `hexl-mode'."
;;   (interactive)
;;   (unless (eq major-mode 'hexl-mode)
;;     (when (buffer-binary-p)
;;       (hexl-mode))))

;; (add-hook 'find-file-hooks 'hexl-if-binary)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;      git customizations            ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Saved configurations for magit's transient popups are in
;; ~/.emacs.d/transient/values.el
(use-package magit
  :commands (magit-status magit-dispatch magit-file-dispatch)
  :bind (("C-c C-g" . magit-status)
         ("C-x M-g" . magit-dispatch)
         ("C-c M-g" . magit-file-dispatch)
         )
  :config
  (setq magit-define-global-key-bindings nil)
  )

(use-package github-link
  :load-path "misc"
  :commands (github-link)
  :bind (("C-c g" . github-link)))

;; vc-git-root isn't marked as autoload, and I need it for my ibuffer
;; setup.
(use-package vc-git
  :ensure nil
  :commands (vc-git-root)
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;     ibuffer customizations         ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



(setq my-ibuffer-groups-top
      '(("TVM C++" (and (filename . "tvm")
                        (or (mode . c-mode) (mode . c++-mode))))
        ("TVM Python" (and (filename . "tvm")
                           (mode . python-mode)))
        ("TVM Misc." (filename . "tvm"))
        ))

(setq my-ibuffer-groups-bottom
      '(("slack" (name . "^\\*Slack "))
        ("emacs" (name . "^\\*.*\\*$"))
	("dired" (mode . dired-mode))
        ))

(defun update-ibuffer-groups ()
  (defun repo-filter (repo-dir)
    `(,(file-name-nondirectory (directory-file-name repo-dir))
      (filename . ,(expand-file-name repo-dir)))
    )

  (defun generate-repo-filters ()
    (let* ((file-names (seq-map 'buffer-file-name (buffer-list)))
         (file-names (seq-filter 'identity file-names))
         (repo-dirs (seq-map 'vc-git-root file-names))
         (repo-dirs (seq-filter 'identity repo-dirs))
         (repo-dirs (seq-uniq repo-dirs))
         (non-directory (seq-map (lambda (dir) (file-name-nondirectory (directory-file-name dir))) repo-dirs))
         (filters (seq-map 'repo-filter repo-dirs))
         )
    filters
    ))

  (defun is-prog-mode-p (mode)
    (eq (get mode 'derived-mode-parent) 'prog-mode))

  (defun mode-filter (mode)
    `(,(string-replace "-mode" "" (symbol-name mode))
      (mode . ,mode))
    )

  (defun generate-mode-filters ()
    (let* ((modes (seq-map (lambda (buffer) (buffer-local-value 'major-mode buffer)) (buffer-list)))
           (modes (seq-uniq modes))
           (modes (seq-filter 'is-prog-mode-p modes))
           (filters (seq-map 'mode-filter modes))
           )
      filters
      ))

  ;; The display order in ibuffer is the same as the filter priority.
  ;; I want the bottom filters to take priority over the repo/mode
  ;; filters, so the repo/mode filters should be explicitly filtered
  ;; to not include anything that matches the bottom filters.
  (defun not-bottom-group (filter-groups)
    (let ((not-bottom `(not (or . ,(seq-map (lambda (g) (nth 1 g)) my-ibuffer-groups-bottom)))))
      (seq-map (lambda (group) `(,(car group) (and ,(nth 1 group) ,not-bottom)))
               filter-groups)
      ))

  (setq ibuffer-filter-groups
        (seq-concatenate 'list
                         my-ibuffer-groups-top
                         (not-bottom-group (generate-repo-filters))
                         (not-bottom-group (generate-mode-filters))
                         my-ibuffer-groups-bottom
                         ))
  (ibuffer-update nil t)
  )

(use-package ibuffer
  :commands (ibuffer)
  :bind (("C-x C-b" . ibuffer)
         :map ibuffer-mode-map
         ("<down-mouse-1>" . ibuffer-visit-buffer))
  :config
  (setq ibuffer-show-empty-filter-groups nil)
  ;; ibuffer-expert, no query before closing unmodified buffers
  (setq ibuffer-expert t)
  (add-hook 'ibuffer-mode-hook 'update-ibuffer-groups)
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;       dired customizations         ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package dired-x
  :ensure nil
  :commands (dired-jump find-name-dired dired-omit-mode)
  :bind (("C-x C-j" . dired-jump)
         ("C-x F" . find-name-dired))
  :hook
  (dired-mode . dired-omit-mode))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;     org-mode customizations        ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package org
  :ensure nil
  :commands (org-agenda)
  :bind (("C-c a" . org-agenda)
         :map org-mode-map
         ;; org-mode has org-beginning-of-line, while I want to keep
         ;; my usual.
         ("C-a" . smarter-move-beginning-of-line)
         )
  :config
  (setq org-log-done t)
  (setq org-startup-folded nil)
  (setq org-agenda-files (seq-filter 'file-exists-p '("~/todo.org" "~/TODO.org" "~/org")))
  (add-to-list 'warning-suppress-types '(undo discard-info))
  (setq org-todo-keywords
        '((sequence "TODO" "WAITING" "|" "DONE" "CANCELLED")))
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;     yasnippet customizations    ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package yasnippet
  :commands (yas-expand)
  :bind (("C-c TAB" . yas-expand)
         :map yas-minor-mode-map
         ("<tab>" . nil)
         ("TAB" . nil))
  :config
  (yas-global-mode)
  (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;       hideshow customizations       ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; For code-folding


;; Not the most robust of defaults, but it's at least semi-functional.
;; Unfortunately, lsp--get-folding-ranges doesn't give all the
;; information available from the LSP server.  Improvements could be
;; made to the `prev-chunk` to strip out comments/strings, and to
;; search backward to the previous block start/end instead of just the
;; beginning of the string.
;;
;; rust-analyzer collapses
;; all information into "comment", "imports", "region", and
;; "". (rust-analyzer/src/to_proto.rs::folding_range().
;;
;; clangd doesn't
;; support folding ranges at all
;; (https://github.com/clangd/clangd/issues/310).
(defvar my-hideshow-default-regexes
  '((:mode rust-mode :regex "^impl.* for " :action fold-children-then-fold)
    (:mode rust-mode :regex "^impl" :action fold-children)
    (:mode rust-mode :regex "^struct" :action no-fold)
    (:mode rust-mode :regex "^use " :action no-fold)
    (:mode rust-mode :regex "" :action fold-children)
    )
  "List of major-mode, regex, action"
  )

(defun my-hideshow-default ()
  (defun prev-chunk (pos)
    (buffer-substring-no-properties (line-beginning-position) (point))
    )

  (defun rule-applies (rule)
    (let* ((rule-mode (plist-get rule ':mode))
           (search-text (prev-chunk (point)))
           (rule-regex (plist-get rule ':regex))
           (matches-mode (eq rule-mode major-mode))
           (matches-regex (string-match-p rule-regex search-text))
           )
      (and matches-mode matches-regex)
      )
    )

  (when (hs-looking-at-block-start-p)
    (let* ((rule (cl-find-if 'rule-applies my-hideshow-default-regexes))
           (action (if rule (plist-get rule ':action) 'fold-children))
           )

      (cond ((eq action 'fold-children) (hs-hide-level 1) (forward-sexp))
            ((eq action 'fold) (hs-hide-block-at-point) (forward-sexp))
            ((eq action 'fold-children-then-fold)
             (hs-hide-level 1) (hs-hide-block-at-point) (forward-sexp))
            ((eq action 'no-fold) nil)
            ('t (error "Unknown action: %s" action)))
    ))
  )



(use-package fold-dwim
  :ensure t
  )

(use-package hideshow
  :ensure nil
  :hook ((rust-mode . hs-minor-mode)
         (hs-minor-mode . hs-hide-all)
         )
  :bind (("C-c C-f" . fold-dwim-toggle))
  :config
  (setq hs-allow-nesting t)
  (setq hs-hide-all-non-comment-function 'my-hideshow-default)
  (add-to-list 'hs-special-modes-alist '(rust-mode "{" "}"))

  ;; Functions that jump into the middle of a block should expand that
  ;; block.
  (defun hs-show-block-saved-excursion (&rest r)
    (save-excursion (hs-show-block)))
  (dolist (func (list
                  'goto-line
                  'xref-goto-xref
                  'xref-find-definitions
                  'xref-find-definitions-other-window
                  ))

    (advice-add func :after #'hs-show-block-saved-excursion))
  )



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;       makefile customizations       ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Don't search inside build directories.
(use-package grep
  :ensure nil
  :config
  (append-to-list 'grep-find-ignored-directories
    '("build" ".build" "build_local" "build_debug"
      "build_docker" "build_docker_cpu" "build_docker_gpu"
      "build-cpu" "build-i386" "build_docker_qemu" "build-hexagon" "build-gpu" "build-wasm"
      "docs/_build" "docs/_staging" "docs/doxygen")
    ))

;; Close the compilation window if it completed without error.
;; TODO: Don't close compilation window if it had something else in it
;; previously.  Instead, switch back to that bufffer.
(defun compilation-exit-autoclose (status code msg)
  (when (and (eq status 'exit) (zerop code))
    (bury-buffer)
    (delete-window (get-buffer-window (get-buffer "*compilation*"))))
  (cons msg code))

(defun parent-directory (dir)
  (unless (equal "/" dir)
    (file-name-directory (directory-file-name dir))))

(defun find-file-in-hierarchy (current-dir pattern)
  (let ((filelist (directory-files current-dir 'absolute pattern))
        (parent (parent-directory (expand-file-name current-dir))))
    (if (> (length filelist) 0)
        (car filelist)
      (when parent
        (find-file-in-hierarchy parent pattern)))))


(defun determine-compile-program (filename)
  (cond ((string-match "\\(GNUm\\|M\\|m\\)akefile" filename) "make")
        ((equal filename "SConstruct") "scons")))

;; TODO: Add defcustom variables for the number of threads to use,
;; defaulting to 1 (slow) and some proportion of the total threads on
;; the machine (fast).

;; TODO: Add defcustom variable for additional options being passed
;; (e.g. --keep-going).

;; TODO: Search for the makefile once, then set compile-command to a
;; buffer-local variable with the result, and compilation-read-command
(defun find-makefile-compile-impl (clean threads)
  (let ((file (find-file-in-hierarchy (file-name-directory buffer-file-name)
                                      "^\\(\\(GNUm\\|M\\|m\\)akefile$\\)\\|\\(SConstruct$\\)")))
    (when file
      (let* ((directory (file-name-directory file))
             (filename (file-name-nondirectory file))
             (program (determine-compile-program filename))
             (cleanflag (if clean
                            (if (equal program "make") "clean" "-c")
                          "")))
        (compile (format "cd \"%s\" && %s -j%d %s"
                         directory program threads cleanflag))))))

(defun find-makefile-compile (clean)
  (interactive "p")
  (find-makefile-compile-impl (> clean 1) 1))

(defun find-makefile-compile-fast (clean)
  (interactive "p")
  (find-makefile-compile-impl (> clean 1) 8))

(use-package ansi-color
  :ensure nil
  :commands (ansi-color-apply-on-region))

(defun colorize-compilation-buffer ()
  (toggle-read-only)
  (ansi-color-apply-on-region (point-min) (point-max))
  (toggle-read-only))

(defun colorize-current-buffer ()
  (interactive)
  (ansi-color-apply-on-region (point-min) (point-max)))

(use-package compile
  :ensure nil
  :commands (compile)
  :bind (("C-M-C" . compile))
  :config
  (setq compilation-scroll-output 'first-error)
  (setq compilation-exit-message-function 'compilation-exit-autoclose)
  ;; Files to ignore in *compilation* buffer.  CMake prints errors in
  ;; the GNU style, but relative to the build directory.
  (dolist (ignore '("CMakeFiles/.*/build.make" "CMakeFiles/Makefile2" "Makefile"))
    (add-to-list 'compilation-transform-file-match-alist (cons ignore nil)))
  :hook (compilation-filter . colorize-compilation-buffer)
  )

(use-package make-mode
  :ensure nil
  :mode ("\\.inc\\'" . makefile-gmake-mode)
  :bind (:map makefile-mode-map
              ("C-c c" . find-makefile-compile)
              ("C-c C-c" . find-makefile-compile-fast))
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;        LSP customizations          ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; For the TVM-specific langage server,
;; sudo pip3 install ffi-navigator

(use-package lsp-mode
  :ensure t
  :hook
  (c-mode-common . lsp)
  (python-mode . lsp)
  :init
  (setq lsp-keymap-prefix "C-c C-d")
  :config
  (setq lsp-headerline-breadcrumb-enable nil)
  (setq lsp-eldoc-enable-hover nil)
  (setq lsp-signature-render-documentation nil)

  ;; TODO: Run the check for ffi-navigator asynchronously
  (when (= 0 (call-process-shell-command "pip3 list | grep ffi-navigator" nil nil nil))
    (lsp-register-client
     (make-lsp-client
      :new-connection (lsp-stdio-connection '("python3" "-m" "ffi_navigator.langserver"))
      :major-modes '(python-mode c++-mode)
      :server-id 'ffi-navigator
      :add-on? t))
    )
  )

(use-package lsp-ui
  :ensure t
  :config
  (setq lsp-ui-sideline-enable nil)
  (setq lsp-ui-doc-enable nil)
  (setq lsp-progress-via-spinner nil)
  (setq lsp-progress-function 'ignore)
  )

;; Add python language server.  Version of jedi is to maintain
;; compatibility with IPython 7.13 (ubuntu 20.04's apt version).
;; Latest PyPI version of ipython is compability with latest jedi.

;; sudo pip3 install jedi-language-server "jedi<0.18.0"
(use-package lsp-jedi
  :ensure t)

;; LSP mode doesn't open lsp-progress-via-spinner in
;; lsp--spinner-start, can leave spinners running if a workspace takes
;; a while to initialize or has an error while initializing.  Revoking
;; all spinner privileges as a result.
(use-package "spinner"
   :defer t
   :config
   (defun spinner-start (&optional type-or-object fps delay)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;        C++ customizations          ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; For LSP integration, for each project, either add these commands to
;; CMakeLists.txt, or compile with `cmake
;; -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..`

;; Or, in CMakeLists.txt
;; set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
;; # Also needed for cmake<3.18.0 (https://gitlab.kitware.com/cmake/cmake/-/issues/16588)
;; set(CMAKE_EXPORT_COMPILE_COMMANDS ON CACHE INTERNAL "")

;; Or, with cmake>=3.17, can set environment variable
;; export CMAKE_EXPORT_COMPILE_COMMANDS=ON

;; Ubuntu 20.04's apt has clangd 10.0, which doesn't look in build
;; subdir for compile_commands.json.  Can symlink to
;; build/compile_commands.json, but I'm lazy so I download clangd 13.0
;; in the settings/install.py



;; TODO: Better find-file, should look up relative to a .git
;; directory.
(use-package find-file
  :ensure t
  :config
  (setq-default ff-always-in-other-window nil)
  (setq cc-search-directories
        '("." "../src" "../include" "src" "include" "/usr/include"
          "./*/include" "../include/*" "../include/*/detail"
          "../../src" "../../include"
          "../../../src" "../libraries/*"
          "../../../include" "../libraries/*/*"
          "../../*/include" "../../*/src" "../*/*/src"
          ))
  (setq cc-other-file-alist
        '(("\\.cc\\'" (".hh" ".h"))
          ("\\.hh\\'" (".cc" ".C" ".cxx" ".cu"))
          ("\\.c\\'" (".h"))
          ("\\.h\\'" (".cxx" ".c" ".cc" ".C" ".CC" ".cpp" ".cu"))
          ("\\.C\\'" (".H" ".hh" ".h"))
          ("\\.H\\'" (".C" ".CC"))
          ("\\.CC\\'" (".HH" ".H" ".hh" ".h"))
          ("\\.HH\\'" (".CC"))
          ("\\.c\\+\\+\\'" (".h++" ".hh" ".h"))
          ("\\.h\\+\\+\\'" (".c++"))

          ("\\.cu\\'" (".hh" ".h"))
          ("\\.cuh\\'" (".cu"))
          ("\\.cpp\\'" (".hpp" ".hh" ".h"))
          ("\\.hpp\\'" (".cpp"))
          ("\\.cxx\\'" (".h" ".hxx" ".hh"))
          ("\\.hxx\\'" (".cxx"))
          ))
  )

;; My preferred C/C++ indentation style.  Files will be overwritten on
;; save by any project-specific clang-format configs, but gets
;; somewhere reasonable while editing, or for new projects.
(defconst lunderberg-c-style
  '((c-electric-pound-behavior . 'alignleft)

    (c-basic-offset . 2)

    (c-tab-always-indent . t)

    (indent-tabs-mode . nil)

    (c-hanging-braces-alist . ((block-open after)
                               (substatement-open after)
                               (substatement-close)
                               (brace-list-open)
                               (substatement-open)
                               (class-open after)
                               (defun-open after)
                               (defun-close)
                               ))

    (c-hanging-colons-alist . ((member-init-intro before)
                               (inher-intro)
                               (case-label after)
                               (access-label after)
                               (label after)))

    (c-cleanup-list . (scope-operator
                       defun-close-semi
                       brace-else-brace
                       brace-elseif-brace
                       brace-catch-brace))

    (c-offsets-alist . ((arglist-close . c-lineup-arglist)
                        (arglist-intro . +)
                        (arglist-close . 0)
                        (case-label . +)
                        (statement-case-intro . +)
                        (inclass . +)
                        (access-label . -)
                        (label . -)
                        (substatement-open . 0)
                        (innamespace . [0])
                        (block-open . 0)))
    )
  "Lunderberg C++/C Programming Style")

(use-package cc-mode
  :ensure nil
  :mode ("\\.h$" . c++-mode)
  :bind (:map c-mode-base-map
              ;; ("C-c C-f" . ff-find-other-file)
              ("C-j" . newline-and-indent)
              ("C-c c" . find-makefile-compile)
              ("C-c C-c" . find-makefile-compile-fast))

  :config
  (c-toggle-auto-newline -1)
  (c-toggle-hungry-state -1)
  (c-add-style "lunderberg" lunderberg-c-style)
  (add-to-list 'c-default-style '(c-mode . "lunderberg"))
  (add-to-list 'c-default-style '(c++-mode . "lunderberg"))
  (add-to-list 'c-default-style '(cuda-mode . "lunderberg"))
  )

(use-package cuda-mode
  :ensure t
  :load-path "misc"
  :mode ("\\.cu$" "\\.cuh$"))

(use-package clang-format+
  :hook (c-mode-common . clang-format+-mode))

;;(global-set-key (kbd "C-c C-g") 'gud-gdb)






;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;   PHP/Web customizations           ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package web-mode
  :ensure t
  :mode "\\.php$")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;        Subprocesses                ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;Fill the buffer in the same way as it would be shown in bash
(defun shelllike-filter (proc string)
  (let* ((buffer (process-buffer proc))
	 (window (get-buffer-window buffer)))
    (with-current-buffer buffer
      (if (not (mark)) (push-mark))
      (exchange-point-and-mark) ;Use the mark to represent the location
      (dolist (char (append string nil))
	(cond ((char-equal char ?\r)
	       (move-beginning-of-line 1))
	      ((char-equal char ?\n)
	       (move-end-of-line 1) (newline))
	      (t
	       (if (/= (point) (point-max)) ;Overwrite character
		   (delete-char 1))
	       (insert char))))
      (exchange-point-and-mark))
    (if window
	(with-selected-window window
	  (goto-char (point-max))))))

(defmacro make-subprocess-command (name command &optional user-sentinel)
  (let* ((quoted-name (format "*%s*" name))
	 (sentinel-name (make-symbol (format "%s-automade-sentinel" name))))
    `(progn
       ;;The function to be run
       (defun ,name ()
	 (interactive)
	 (if (get-buffer ,quoted-name)
	     (with-current-buffer ,quoted-name (erase-buffer)))
	 (setq mode-name (propertize mode-name 'face 'font-lock-string-face))
	 (let ((proc (start-process-shell-command (buffer-name) ,quoted-name ,command)))
	   (set-process-filter proc 'shelllike-filter)
	   (set-process-sentinel proc ',sentinel-name)
	   ;; (switch-to-buffer-other-window ,quoted-name)
	   ;; (other-window -1)
	   ))
       ;;The sentinel, run after the process completes, changing the status color of the buffer.
       (defun ,sentinel-name (process event)
	 (let* ((success (string-equal event "finished\n"))
		(mode-line-color (if success 'mode-line-highlight 'font-lock-warning-face))
		(proc-buffer (process-buffer process))
		(proc-window (get-buffer-window proc-buffer))
		(file-buffer (get-buffer (format "%s" process))))
	   (with-current-buffer file-buffer
	     (setq mode-name (propertize mode-name 'face mode-line-color)))
	   ;; (if success (progn
	   ;;    (bury-buffer proc-buffer)
	   ;;    (if proc-window (delete-window proc-window))))
	   (unless success
	     (switch-to-buffer-other-window ,quoted-name))
	   )
	 ,(if user-sentinel `(,user-sentinel process event))))))

(make-subprocess-command execute-current-buffer (buffer-file-name))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;      Python customizations         ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun tir-to-python ()
  (interactive)

    (dolist (replacement '(("&&" . "and")
                           ("||" . "or")
                           ("(bool)1" . "True")
                           ("(bool)0" . "False")
                           ("0f" . "0.0")
                           ("!" . "not ")
                           ("not =" . "!=")
                          ))
      (save-excursion
      (goto-char (point-min))
      (while (re-search-forward (car replacement) nil t)
        (replace-match (cdr replacement)))
      ))
    )


(use-package python
  :ensure nil
  :mode ("SConstruct" "SConscript")
  :magic ("#!/usr/bin/env python")
  :bind (:map python-mode-map
              ("C-c C-c" . execute-current-buffer)
              ("C-c C-d" . nil)
              )
  :config

  (add-hook 'python-mode-hook
            '(lambda ()
               ;; electric-indent-mode does the complete wrong thing
               ;; in many cases in python.  When typing a colon, it
               ;; re-indents the current line, even if I have already
               ;; set the desired indentation.
               (electric-indent-local-mode -1)

               ;; In cases where a snippet contains multiple
               ;; syntactically allowed indents, the default 'auto
               ;; will add extra indentation compared to the snippet.
               (set (make-local-variable 'yas-indent-line) 'fixed)
               ))
  )

(use-package blacken
  :ensure t
  :hook (python-mode . blacken-mode))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;       LaTeX customizations         ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package latex
  :defer t
  :ensure auctex
  ;; :mode ("\\.inc\\'" . latex-mode)
  :bind (:map LaTeX-mode-map
              ;; Need to redefine C-j, because auctex defines it as
              ;; reindent-newline-and-indent.
              ("C-j" . newline-and-indent)
              ("C-c c" . find-makefile-compile)
              ("C-c C-c" . find-makefile-compile-fast)
              )
  :config
  (add-hook 'LaTeX-mode-hook
            '(lambda ()
               (TeX-fold-mode 1)
               (auto-fill-mode 1)
               (electric-indent-local-mode nil)

               ;; Automatically compile to pdf after saving
               ;;(add-hook 'after-save-hook 'find-makefile-compile nil 'make-it-local)
               ))
  )

;; Don't autocomplete to the intermediate files.
(append-to-list 'completion-ignored-extensions
  '(".aux" ".fls" ".out" ".pdf" ".toc"))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;      PoV-Ray customizations      ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;; Display the image in another window after rendering
(defun povray-render-sentinel (process event)
  (let* ((success (string-equal event "finished\n"))
         (povfile-buffer (get-buffer (format "%s" process)))
         (povfile-window (get-buffer-window povfile-buffer))
         (png-filename (replace-regexp-in-string "\.pov$" "\.png" (buffer-file-name povfile-buffer)))
         (png-buffer (get-file-buffer png-filename)))
    (when (and success	(display-graphic-p))
      (when png-buffer (kill-buffer png-buffer))
      (find-file-other-window png-filename)
      (other-window -1))))

;;Render the current povray file, using povray_build.py script
(make-subprocess-command povray-render
                         (format "povray_build.py %s" (buffer-name)))

;; Older version, call Render the current povray file
;; (make-subprocess-command povray-render
;;                          (format "scons -u %s" (replace-regexp-in-string "\.pov$" "\.png" (buffer-name)))
;;                          povray-render-sentinel)


(use-package pov-mode
  :mode "\\.pov\\'"
  :bind (:map
         pov-mode-map
         ("C-c C-c 1" . nil)
         ("C-c C-c 2" . nil)
         ("C-c C-c 3" . nil)
         ("C-c C-c 4" . nil)
         ("C-c C-c 5" . nil)
         ("C-c C-c c" . nil)
         ("C-c C-c e" . nil)
         ("C-c C-c h" . nil)
         ("C-c C-c i" . nil)
         ("C-c C-c l" . nil)
         ("C-c C-c r" . nil)
         ("C-c C-c v" . nil)
         ("C-c C-c" . povray-render)))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;      golang  customizations      ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package go-mode
  :mode "\\.go$"

  :config
  ;; Don't want this in the :hook section, because it only needs to be
  ;; loaded if go-mode is used.
  (add-hook 'before-save-hook 'gofmt-before-save)
  (add-hook 'go-mode-hook
            (lambda () (setq tab-width 2)
              (setq indent-tabs-mode 1))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;        lua customizations           ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package lua-mode
  :mode "\\.lua$"
  :interpreter "lua")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;        rust customizations          ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; The same as rust-compile, but with the --all-targets flag.
(defun rust-compile-all ()
  "Compile using `cargo build`"
  (interactive)
  (rust--compile "%s build --all-targets" rust-cargo-bin))

;; For LSP integration, install rust-analyzer using rustup
;;     $ rustup +nightly component add rust-analyzer-preview
;;
;; Ref: https://rust-analyzer.github.io/manual.html#rustup

(use-package rust-mode
  :after (lsp-mode)
  :mode "\\.rs$"
  :bind (:map
         rust-mode-map
         ("C-c C-c" . rust-compile-all)
         ("C-c C-r" . rust-run)
         ("C-c C-t" . rust-test))
  :config
  ;; rust-mode defines several C-c commands, which I want for myself.
  (setq rust-mode-map (make-sparse-keymap))
  (setq rust-format-on-save t)
  (setq lsp-rust-server 'rust-analyzer)
  (setq lsp-rust-analyzer-server-command '("rustup" "run" "nightly" "rust-analyzer"))
  (setq lsp-rust-analyzer-proc-macro-enable t)
  (setq lsp-rust-analyzer-experimental-proc-attr-macros t)
  (setq lsp-completion-provider :none)
  :hook
  (rust-mode . lsp)
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;      Misc Language Installs         ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package groovy-mode
  :mode "\\.groovy$"
  :magic ("#!groovy"))

(use-package cmake-mode
  :mode ("CMakeLists.txt" "\\.cmake$"))

(use-package dockerfile-mode
  :mode ("Dockerfile*"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;     screeps customizations          ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; TODO: Look for the upload script relative to the source directory
;; instead of hard-coding a location.
(make-subprocess-command upload-screeps-code "~/screeps/upload.py")

(use-package javascript-mode
  :ensure nil
  :bind (:map
         js-mode-map
         ;; TODO: Only make this keybinding if I'm in the screeps
         ;; directory.
         ("C-c C-c" . upload-screeps-code)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;     projectile customizations       ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Projectile to find all project-specific files, helm to use a nicer
;; fuzzy search.
(use-package helm-projectile
    :ensure t
    :commands (helm-projectile-find-file)
    :bind ("C-c p f" . helm-projectile-find-file))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;      slack customizations           ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(use-package slack
  :ensure nil
  ;; Need https://github.com/yuya373/emacs-slack/pull/552
  :load-path "~/misc/emacs-slack"
  :commands (slack-start)
  :init
  (setq slack-buffer-emojify t) ;; if you want to enable emoji, default nil
  (setq slack-prefer-current-team t)
  (setq slack-thread-also-send-to-room nil)
  :config
  (slack-register-team
   :name "OctoML"
   :default t
   ;; Token from TS.boot_data.api_token in app.slack.com.
   :token (auth-source-pick-first-password
           :host "octoml.slack.com"
           :user "Lunderberg^token")
   ;; Cookie is "d" cookie from Slack HTTP request.  Must be percent-encoded.
   :cookie (auth-source-pick-first-password
            :host "octoml.slack.com"
            :user "Lunderberg^cookie")
   :subscribed-channels '(random)
   :full-and-display-names t)
  )

(use-package alert
  :commands (alert)
  :init
  (setq alert-default-style 'notifier))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;    end of human-written section     ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
